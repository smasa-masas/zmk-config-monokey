#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <300>;
};

&lt { quick-tap-ms = <300>; };

/ {
    combos {
        compatible = "zmk,combos";

        scroll {
            bindings = <&mo 5>;
            key-positions = <27 28>;
        };

        LEFTCLICK {
            bindings = <&mkp MB1>;
            key-positions = <16 17>;
        };

        RIGHTCLICK {
            bindings = <&mkp MB2>;
            key-positions = <17 18>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    behaviors {
        right_click: right_click_behavior {
            compatible = "zmk,behavior-mouse-key";
            label = "RIGHT_CLICK";
            #binding-cells = <0>;

            // 右クリックは通常 MB2 に対応（ZMKの標準定義）

            bindings = <&mkp MB2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W                    &kp E         &kp R        &kp T                            &kp Y            &kp U                 &kp I     &kp O            &kp P
&kp A             &kp S                    &kp D         &kp F        &kp G                            &kp H            &kp J                 &lt 5 K   &kp L            &mt SLASH QUESTION
&mt LEFT_SHIFT Z  &kp X                    &kp C         &kp V        &kp B                            &kp N            &kp M                 &mkp MB1  &mkp MB2         &mt RIGHT_SHIFT LS(INT_RO)
&kp LCTRL         &mt LEFT_SHIFT LEFT_GUI  &kp LEFT_ALT  &lt 1 LANG2  &lt 2 SPACE  &lt 3 LANGUAGE_1    &lt 3 BACKSPACE  &mt LANGUAGE_1 ENTER            &kp RIGHT_SHIFT  &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&mt F1 ESC            &mt LS(F2) LS(NUMBER_2)  &mt LS(F3) LS(NUMBER_3)  &mt LS(KP_NUMLOCK) F4  &mt LS(F5) LS(NUMBER_5)           &kp CARET         &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&mt F6 LS(NUMBER_6)   &mt F7 LS(NUMBER_7)      &mt F8 LS(NUMBER_8)      &mt F9 LS(NUMBER_9)    &trans                            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &kp MINUS             &kp EQUAL
&kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))     &kp LS(LG(N5))           &trans                 &trans                            &kp SEMICOLON     &kp SQT            &kp COMMA      &kp PERIOD            &trans
&trans                &trans                   &trans                   &trans                 &trans                   &mo 6    &trans            &trans                            &trans                &trans
            >;
        };

        NUM {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5             &kp KP_PLUS      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MINUS
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10            &kp KP_MULTIPLY  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp KP_SLASH
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15            &kp NUMBER_0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT
&trans   &trans   &trans   &trans   &trans   &trans    &kp MINUS        &kp PERIOD                  &kp LA(SEMI)  &kp KP_COMMA
            >;
        };

        ARROW {
            bindings = <
&kp LS(N2)                   &kp RBKT      &kp NON_US_HASH  &kp LS(N8)     &kp LS(N9)                  &kp LC(PAGE_UP)    &kp LC(PAGE_UP)     &kp UP_ARROW    &kp LC(PAGE_DOWN)    &kp LC(PRINTSCREEN)
&kp EXCL                     &kp LBKT      &kp POUND        &kp DOLLAR     &kp PRCNT                   &kp LC(PAGE_DOWN)  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp LC(AT)
&mt LEFT_SHIFT LS(NUMBER_7)  &kp LS(RBKT)  &kp PIPE         &kp LESS_THAN  &kp GREATER_THAN            &kp C_PREVIOUS     &kp LC(LEFT_ARROW)  &trans          &kp LC(RIGHT_ARROW)  &kp C_NEXT
&trans                       &trans        &trans           &trans         &trans            &trans    &trans             &trans                              &trans               &bootloader
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans  &trans    &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &mkp MB1  &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans              &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &none   &trans  &trans            &none   &none   &trans  &trans  &none
&none   &trans  &trans  &trans  &trans            &none   &none   &none   &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans  &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans            &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans            &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &bootloader                 &trans        &trans
            >;
        };
    };
};
